{
  "name": "scanjs",
  "version": "0.0.2",
  "description": "Static analysis tool for javascript codebases",
  "main": "scanner.js",
  "bin": {
    "scanjs": "./scanner.js",
    "scanjs-server": "./server.js"
  },
  "preferGlobal": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/scanjs.git"
  },
  "keywords": [
    "scanjs",
    "code-analysis",
    "javascript",
    "static-analysis"
  ],
  "author": {
    "name": "Paul Theriault, Frederik Braun, Rob Fletcher"
  },
  "license": "MPL",
  "dependencies": {
    "acorn": "~0.3.0",
    "tern": "~0.5.0",
    "optimist": "~0.5.2",
    "jszip": "~2.2.0",
    "node-static": "~0.7.3",
    "js-beautify": "~1.4.2"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "scripts": {
    "test": "cd tests && mocha -r mocha-includes cases/placeholders.js cases/test_ruletests.js cases/production_ruletests.js && mocha -r mocha-includes cases/innerhtml.js cases/CustomEvent.js cases/addIdleObserver.js cases/createContextualFragment.js cases/crypto.generateCRMFRequest.js cases/document.write.js cases/document.writeln.js cases/eval.js cases/geolocation.js cases/href.js cases/indexedDB.js cases/localStorage.js cases/message.js cases/newFunction.js cases/outerHTML.js cases/parseFromString.js cases/sessionStorage.js cases/setInterval.js cases/setTimeout.js cases/src.js cases/getDeviceStorage.js cases/moz/moz.js",
    "start": "node server.js"
  },
  "readme": "ScanJS\n======\n\n![travis-ci](https://travis-ci.org/mozilla/scanjs.svg)\n\nScanJS is a Static analysis tool for javascript code. ScanJS was created as an aid for security review, to help identify security issues in client-side web applications.\n\nScanJS uses Acorn to convert sources to AST, then walks AST looking for source patterns. Use the rules file supplied, or load your own rules. \n\nScanJS Rules\n------------------------\nRules are specified in JSON format - for an example see ```/common/template_rules.json```\n\nAt a minimum, each must have rule is made up of 2 attributes:\n- name: the name of the rule\n- source: javascript source which matches one of the patterns below (see Rule Syntax below)\n\nOptionally a rule may have the following attirbutes:\n- testhit: one more JavaScript statements (seperate by semi-colons) that the rule will match\n- testmiss: the rule should not match any of these statements\n- desc: description of the rule\n- threat: for catgorizing rules by threat\n\n\nRule Syntax\n------------------------\n\nFor the `source` attribute, the following basic statements are supported:\n- identifier `foo`: matches any identifier ,  \"foo\"\n- property `$_any.foo`: $_any is wildcard, matches anything.foo\n- objectproperty `foo.bar`: matches object and property, i.e. foo.bar\n\nYou can also matches function calls based on the same syntax:\n- call `foo()`: matches function calls with this name\n- propertycall `$_any.foo`: matches anything.foo() but not foo()\n- objectpropertycall: `foo.bar()`: matches foo.bar() only\n\nYou can also search for functions with matching literal arguments:\n\n- callargs `foo('test',ignored,42)`: matches a function called foo, with 'test' as the first argument, anything as the second argument, and the number 42 as the third argument (i.e. matches ONLY literal arguments).\n- propertycallargs `$_any.foo('test',ignored,42)`: same as above, but function has to be a property.\n- objectpropertycallargs `foo.bar('test',ignored,42)`: same as above, but matches both object and property\n\nYou can also search for assignment to a specifically named identifier:\n\n- assignment `foo=$_any`: matches when foo is assigned to something\n- propertyassignment `$_any.foo=$_any`: matches when anything.foo is assigned to something\n- objectpropertyassignment `foo.bar=$_any`: matches when foo.bar is assigned to something\n\nIf you specify `$_unsafe` on the right hand side (e.g. foo.innerHTML=$_unsafe), it will only match if the RHS contains at least one identifier.\n\nTips:\n- Javascript is very dynamic, and this is navie approach: write conservative rules and review for false positives\n- One simple statement per rule, not complex statements (yet)! \n- 'foo' does NOT match 'this.foo', if you are looking for something in global (e.g. 'alert()' ), you need to add two rules: 'alert.()' and '$_any.alert()'\n- Try the rule out in the experiment tab to test what it matches\n\n\nExamples:\nSee /common/template_rules.json and /common/rules.json\n\nRunning ScanJS\n======================\n\nRun ScanJS in the browser\n------------------------\n- Install [node.js](http://nodejs.org/)\n- ```nodejs server.js```\n- Navigate to http://127.0.0.1:4000/client/ or see our [example page](http://mozilla.github.io/scanjs/client/)\n\nRun ScanJS from the command line\n------------------------\n- Install [node.js](http://nodejs.org/)\n- ```scanner.js -t DIRECTORY_PATH```\n\nTesting instructions\n------------------------\nTests use the mocha testing framework.\n\n- `npm test` \n- or in the browser:```http://127.0.0.1:4000/tests/```\n\nTests are included in the rules declaration (see common/rules.json) by specifying the following two attributes, which are specified in the form of a series of javascript statements:\n\n- _testhit_: The rule should match each of these statements individualy. \n- _testmiss_: The rule should not match all of these statements.\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/scanjs/issues"
  },
  "homepage": "https://github.com/mozilla/scanjs",
  "_id": "scanjs@0.0.2",
  "_shasum": "8c18b05c363ef119c451585fdef832ab8070562f",
  "_resolved": "git+https://github.com/mozilla/scanjs#ace30ee0fccc248a7d19eff0693a6fc5a985c738",
  "_from": "scanjs@git+https://github.com/mozilla/scanjs"
}
